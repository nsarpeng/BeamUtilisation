using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BeamUtilisation
{
    class EC3calcs
    {
        public double Epsilon(double fy)
        {
            return Math.Pow(235 / fy, 0.5);
        }
        public int SectionClassOutstandFlangeCompression(double c, double t, double epsilon)
        {
            // assume compression only
            if (c/t <= 9 * epsilon)
            {
                return 1;
            }
            else if(c / t <= 10 * epsilon)
            {
                return 2;
            }
            else if (c / t <= 14 * epsilon)
            {
                return 3;
            }
            else
            {
                return 4;
            }

        }

        
        public int SectionClassWebBending(double c, double t, double epsilon)
        {
            // assume bending only
            if (c / t <= 72 * epsilon)
            {
                return 1;
            }
            else if (c / t <= 83 * epsilon)
            {
                return 2;
            }
            else if (c / t <= 124 * epsilon)
            {
                return 3;
            }
            else
            {
                return 4;
            }
        }

        public double Fy(string grade, double t)
        {
            // EN 10025-2 Table 7
            if (grade == "S275")
            {
                if (t <= 16)
                {
                    return 275;
                }
                else if (t <= 40)
                {
                    return 265;
                }
                else if (t <= 63)
                {
                    return 255;
                }
                else if (t <= 80)
                {
                    return 245;
                }
                else if (t <= 100)
                {
                    return 235;
                }
                else if (t <= 150)
                {
                    return 225;
                }
                else if (t <= 200)
                {
                    return 215;
                }
                else if (t <= 250)
                {
                    return 205;
                }
                else
                {
                    return 1; // some low number
                }
            }
            else if (grade =="S355")
            {
                if (t <= 16)
                {
                    return 355;
                }
                else if (t <= 40)
                {
                    return 345;
                }
                else if (t <= 63)
                {
                    return 335;
                }
                else if (t <= 80)
                {
                    return 325;
                }
                else if (t <= 100)
                {
                    return 315;
                }
                else if (t <= 150)
                {
                    return 295;
                }
                else if (t <= 200)
                {
                    return 285;
                }
                else if (t <= 250)
                {
                    return 275;
                }
                else
                {
                    return 1; // some low number
                }
            }
            else
            {
                return 1; // some low number
            }
        }

        public double ChiLT(double phiLT, double beta, double lambdaLT)
        {
            return Math.Min(Math.Min(1,1/Math.Pow(lambdaLT,2)), 1 / (phiLT + Math.Pow( Math.Pow(phiLT, 2) - beta * Math.Pow(phiLT, 2),0.5)));
        }

        public double Reducedfy(double fy, double rho)
        {
            return (1 - rho) * fy;
        }

        public double Mcr(double C1, double C2, double E, double G, double Iy, double Iz, double Iw, double It, double k, double kw, double L, double zg)
        {
            double g = 1; // Math.Pow(1 - (Iz / Iy), 0.5);
            // equation from NCCI SN002
            double part1 = C1 * Math.Pow(Math.PI, 2) * E * Iz / (Math.Pow(k * L, 2) * g);
            double part2 = Math.Pow(k / kw, 2) * Iw / Iz;
            double part3 = Math.Pow(k * L , 2) * G * It / (Math.Pow( Math.PI, 2)*E * Iz);
            double part4 = Math.Pow(C2 * zg, 2);
            double part5 = C2 * zg;
            return part1*(Math.Pow(part2+part3+part4,0.5)-part5 );
        }

        public string BucklingCurveTable6pt5UKNA_DoubleSymmetricIHandHollow(double h, double b)
        {
            if (h/b <= 2)
            {
                return "b";
            }
            else if (h/b <= 3.1)
            {
                return "c";
            }
            else
            {
                return "d";
            }
        }

        public double AlphaLT(string curve)
        {
            // EN1993-1-1 Table 6.3
            if (curve == "a")
            {
                return 0.21;
            }
            else if (curve == "b")
            {
                return 0.34;
            }
            else if (curve == "c")
            {
                return 0.49;
            }
            else if (curve == "d")
            {
                return 0.76;
            }
            else
            {
                return 1;
            }
        }

        public double LambdaLT(double Wy, double fy, double Mcr)
        {
            return Math.Pow(Wy * fy / Mcr, 0.5);
        }

        public double PhiLT(double alphaLT, double lambdaLT, double lambdaLT0, double beta)
        {
            return 0.5 * (1 + alphaLT * (lambdaLT - lambdaLT0) + beta * Math.Pow(lambdaLT, 2));
        }

        public double VplRd(double Av, double fy, double gammaM0)
        {
            // EN1993-1-1 Eq.6.18
            return Av * (fy / Math.Pow(3, 0.5)) / gammaM0;
        }

        public double AvIHparallel(double A, double h, double b, double tf, double tw, double r)
        {
            // EN1993-1-1 Cl.6.2.6(3)
            double nu = 1; // conservative
            double hw = h-2*tf;
            return Math.Max(A-2*b*tf+(tw+2*r)*tf,nu*hw*tw);
        }

        public Boolean ShearInteraction(double VEd, double VplRd)
        {
            // EC3 6.2.8(2)
            if (Math.Abs(VEd) > 0.5 * VplRd)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public Boolean Shearbuckling(double epsilon, double nu, double hw, double tw)
        {
            if (hw/tw > 72 * epsilon / nu)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public double Rho(double VEd, double VplRd)
        {
            //EN1993-1-1 Eq.6.29
            return Math.Pow(2 * Math.Abs(VEd) / VplRd - 1, 2);
        }

        public double kcUKNA(double C1)
        {
            return 1 / Math.Pow(C1, 0.5);
        }

        public double ChiLTmod(double chiLT, double f, double lambdaLT)
        {
            return Math.Min(Math.Min(1, 1 / Math.Pow(lambdaLT, 2)), chiLT / f);
        }

        public double F(double kc, double lambdaLT)
        {
            //EC3 cl.6.3.2.3(2)
            return Math.Min(1, 1 - 0.5 * (1 - kc) * (1 - 2 * Math.Pow(lambdaLT - 0.8, 2)));
        }

        public double PhiLT6322(double alphaLT, double lambdaLT)
        {
            return 0.5 * (1 + alphaLT * (lambdaLT - 0.2) +  Math.Pow(lambdaLT, 2));
        }

        public double ChiLT6322(double phiLT, double lambdaLT)
        {
            return Math.Min(1, 1 / (phiLT + Math.Pow(Math.Pow(phiLT, 2) - Math.Pow(lambdaLT, 2), 0.5)));
        }

        public double AlphaLT6322(string curve)
        {
            if (curve == "a")
            {
                return 0.21;
            }
            else if (curve == "b")
            {
                return 0.34;
            }
            else if (curve == "c")
            {
                return 0.49;
            }
            else if (curve == "d")
            {
                return 0.76;
            }
            else
            {
                return 1;
            }
        }

        public string BucklingCurveTable6pt4RolledI(double h, double b)
        {
            if (h / b <= 2)
            {
                return "a";
            }
            else
            {
                return "b";
            }
        }

        public string BucklingCurveTable6pt4WeldedI(double h, double b)
        {
            if (h / b <= 2)
            {
                return "c";
            }
            else
            {
                return "d";
            }
        }
        public string BucklingCurveTable6pt4Other()
        {
            return "d";
        }

        public double McRd(int secclass, double Wpl, double Wel, double fy, double gammaM0, out double W)
        {
            if (secclass == 1 || secclass == 2)
            {
                W = Wpl;
               
            }
            else if (secclass == 3)
            {
                W= Wel;
            }
            else
            {
                W = 1;
            }
            return W * fy / gammaM0;
        }

        public double MbRd(double chiLT, double W, double fy, double gammaM1)
        {
            return chiLT * W  * fy / gammaM1;
        }

        public double G(double E, double v)
        {
            //EC2 3.2.6(1)
            return E / (2 * (1 + v));
        }


        public void UBs(out string[] ubname, out double[] h, out double[] b, out double[] tw, out double[] tf, out double[] r, out double[] Iyy, out double[] Izz, out double[] Wyel, out double[] Wzel, out double[] Wypl, out double[] Wzpl, out double[] U, out double[] X, out double[] Iw, out double[] It, out double[] A)
        {
            ubname = new string[]{ "1016 x 305 x 584", "1016 x 305 x 494", "1016 x 305 x 438", "1016 x 305 x 415", "1016 x 305 x 393", "1016 x 305 x 350", "1016 x 305 x 314", "1016 x 305 x 272", "1016 x 305 x 249", "1016 x 305 x 222", "914 x 419 x 388", "914 x 419 x 343", "914 x 305 x 576", "914 x 305 x 521", "914 x 305 x 474", "914 x 305 x 425", "914 x 305 x 381", "914 x 305 x 345", "914 x 305 x 313", "914 x 305 x 289", "914 x 305 x 271", "914 x 305 x 253", "914 x 305 x 238", "914 x 305 x 224", "914 x 305 x 201", "838 x 292 x 226", "838 x 292 x 194", "838 x 292 x 176", "762 x 267 x 197", "762 x 267 x 173", "762 x 267 x 147", "762 x 267 x 134", "686 x 254 x 170", "686 x 254 x 152", "686 x 254 x 140", "686 x 254 x 125", "610 x 305 x 238", "610 x 305 x 179", "610 x 305 x 149", "610 x 229 x 140", "610 x 229 x 125", "610 x 229 x 113", "610 x 229 x 101", "610 x 178 x 100", "610 x 178 x 92", "610 x 178 x 82", "533 x 312 x 273", "533 x 312 x 219", "533 x 312 x 182", "533 x 312 x 151", "533 x 210 x 138", "533 x 210 x 122", "533 x 210 x 109", "533 x 210 x 101", "533 x 210 x 92", "533 x 210 x 82", "533 x 165 x 85", "533 x 165 x 75", "533 x 165 x 66", "457 x 191 x 161", "457 x 191 x 133", "457 x 191 x 106", "457 x 191 x 98", "457 x 191 x 89", "457 x 191 x 82", "457 x 191 x 74", "457 x 191 x 67", "457 x 152 x 82", "457 x 152 x 74", "457 x 152 x 67", "457 x 152 x 60", "457 x 152 x 52", "406 x 178 x 85", "406 x 178 x 74", "406 x 178 x 67", "406 x 178 x 60", "406 x 178 x 54", "406 x 140 x 53", "406 x 140 x 46", "406 x 140 x 39", "356 x 171 x 67", "356 x 171 x 57", "356 x 171 x 51", "356 x 171 x 45", "356 x 127 x 39", "356 x 127 x 33", "305 x 165 x 54", "305 x 165 x 46", "305 x 165 x 40", "305 x 127 x 48", "305 x 127 x 42", "305 x 127 x 37", "305 x 102 x 33", "305 x 102 x 28", "305 x 102 x 25", "254 x 146 x 43", "254 x 146 x 37", "254 x 146 x 31", "254 x 102 x 28", "254 x 102 x 25", "254 x 102 x 22", "203 x 133 x 30", "203 x 133 x 25", "203 x 102 x 23", "178 x 102 x 19", "152 x 89 x 16", "127 x 76 x 13" };
            h = new double[] { 1056.0, 1036.0, 1026.0, 1020.0, 1015.9, 1008.0, 999.9, 990.1, 980.1, 970.3, 921.0, 911.8, 993.0, 981.0, 971.0, 961.0, 951.0, 943.0, 932.0, 926.6, 923.0, 918.4, 915.0, 910.4, 903.0, 850.9, 840.7, 834.9, 769.8, 762.2, 754.0, 750.0, 692.9, 687.5, 683.5, 677.9, 635.8, 620.2, 612.4, 617.2, 612.2, 607.6, 602.6, 607.4, 603.0, 598.6, 577.1, 560.3, 550.7, 542.5, 549.1, 544.5, 539.5, 536.7, 533.1, 528.3, 534.9, 529.1, 524.7, 492.0, 480.6, 469.2, 467.2, 463.4, 460.0, 457.0, 453.4, 465.8, 462.0, 458.0, 454.6, 449.8, 417.2, 412.8, 409.4, 406.4, 402.6, 406.6, 403.2, 398.0, 363.4, 358.0, 355.0, 351.4, 353.4, 349.0, 310.4, 306.6, 303.4, 311.0, 307.2, 304.4, 312.7, 308.7, 305.1, 259.6, 256.0, 251.4, 260.4, 257.2, 254.0, 206.8, 203.2, 203.2, 177.8, 152.4, 127.0 };
            b = new double[] { 314.0, 309.0, 305.0, 304.0, 303.0, 302.0, 300.0, 300.0, 300.0, 300.0, 420.5, 418.5, 322.0, 319.0, 316.0, 313.0, 310.0, 308.0, 309.0, 307.7, 307.0, 305.5, 305.0, 304.1, 303.3, 293.8, 292.4, 291.7, 268.0, 266.7, 265.2, 264.4, 255.8, 254.5, 253.7, 253.0, 311.4, 307.1, 304.8, 230.2, 229.0, 228.2, 227.6, 179.2, 178.8, 177.9, 320.2, 317.4, 314.5, 312.0, 213.9, 211.9, 210.8, 210.0, 209.3, 208.8, 166.5, 165.9, 165.1, 199.4, 196.7, 194.0, 192.8, 191.9, 191.3, 190.4, 189.9, 155.3, 154.4, 153.8, 152.9, 152.4, 181.9, 179.5, 178.8, 177.9, 177.7, 143.3, 142.2, 141.8, 173.2, 172.2, 171.5, 171.1, 126.0, 125.4, 166.9, 165.7, 165.0, 125.3, 124.3, 123.4, 102.4, 101.8, 101.6, 147.3, 146.4, 146.1, 102.2, 101.9, 101.6, 133.9, 133.2, 101.8, 101.2, 88.7, 76.0 };
            tw = new double[] { 36.0, 31.0, 26.9, 26.0, 24.4, 21.1, 19.1, 16.5, 16.5, 16.0, 21.4, 19.4, 36.1, 33.0, 30.0, 26.9, 24.4, 22.1, 21.1, 19.5, 18.4, 17.3, 16.5, 15.9, 15.1, 16.1, 14.7, 14.0, 15.6, 14.3, 12.8, 12.0, 14.5, 13.2, 12.4, 11.7, 18.4, 14.1, 11.8, 13.1, 11.9, 11.1, 10.5, 11.3, 10.9, 10.0, 21.1, 18.3, 15.2, 12.7, 14.7, 12.7, 11.6, 10.8, 10.1, 9.6, 10.3, 9.7, 8.9, 18.0, 15.3, 12.6, 11.4, 10.5, 9.9, 9.0, 8.5, 10.5, 9.6, 9.0, 8.1, 7.6, 10.9, 9.5, 8.8, 7.9, 7.7, 7.9, 6.8, 6.4, 9.1, 8.1, 7.4, 7.0, 6.6, 6.0, 7.9, 6.7, 6.0, 9.0, 8.0, 7.1, 6.6, 6.0, 5.8, 7.2, 6.3, 6.0, 6.3, 6.0, 5.7, 6.4, 5.7, 5.4, 4.8, 4.5, 4.0};
            tf = new double[] { 64.0, 54.0, 49.0, 46.0, 43.9, 40.0, 35.9, 31.0, 26.0, 21.1, 36.6, 32.0, 65.0, 58.9, 54.1, 49.0, 43.9, 39.9, 34.5, 32.0, 30.0, 27.9, 25.9, 23.9, 20.2, 26.8, 21.7, 18.8, 25.4, 21.6, 17.5, 15.5, 23.7, 21.0, 19.0, 16.2, 31.4, 23.6, 19.7, 22.1, 19.6, 17.3, 14.8, 17.2, 15.0, 12.8, 37.6, 29.2, 24.4, 20.3, 23.6, 21.3, 18.8, 17.4, 15.6, 13.2, 16.5, 13.6, 11.4, 32.0, 26.3, 20.6, 19.6, 17.7, 16.0, 14.5, 12.7, 18.9, 17.0, 15.0, 13.3, 10.9, 18.2, 16.0, 14.3, 12.8, 10.9, 12.9, 11.2, 8.6, 15.7, 13.0, 11.5, 9.7, 10.7, 8.5, 13.7, 11.8, 10.2, 14.0, 12.1, 10.7, 10.8, 8.8, 7.0, 12.7, 10.9, 8.6, 10.0, 8.4, 6.8, 9.6, 7.8, 9.3, 7.9, 7.7, 7.6};
            r = new double[] { 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 24.1, 24.1, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.1, 19.0, 19.1, 19.0, 19.1, 19.1, 17.8, 17.8, 17.8, 16.5, 16.5, 16.5, 16.5, 15.2, 15.2, 15.2, 15.2, 16.5, 16.5, 16.5, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 10.2, 8.9, 8.9, 8.9, 8.9, 8.9, 8.9, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6 };
            Iyy = new double[] { 1246000, 1028000, 910000, 853000, 808000, 723000, 644000, 554000, 481000, 408000, 720000, 626000, 1102000, 982000, 886000, 788000, 697000, 626000, 548000, 504000, 472000, 436000, 406000, 376000, 325000, 340000, 279000, 246000, 240000, 205000, 169000, 151000, 170000, 150000, 136000, 118000, 209000, 153000, 126000, 112000, 98600, 87300, 75800, 72500, 64600, 55900, 199000, 151000, 123000, 101000, 86100, 76000, 66800, 61500, 55200, 47500, 48500, 41100, 35000, 79800, 63800, 48900, 45700, 41000, 37100, 33300, 29400, 36600, 32700, 28900, 25500, 21400, 31700, 27300, 24300, 21600, 18700, 18300, 15700, 12500, 19500, 16000, 14100, 12100, 10200, 8250, 11700, 9900, 8500, 9570, 8200, 7170, 6500, 5370, 4460, 6540, 5540, 4410, 4000, 3410, 2840, 2900, 2340, 2100, 1360, 834, 473};
            Izz = new double[] { 33400, 26800, 23400, 21700, 20500, 18500, 16200, 14000, 11800, 9550, 45400, 39200, 36500, 32100, 28700, 25200, 21900, 19500, 17000, 15600, 14500, 13300, 12300, 11200, 9420, 11400, 9070, 7800, 8170, 6850, 5460, 4790, 6630, 5780, 5180, 4380, 15800, 11400, 9310, 4510, 3930, 3430, 2910, 1660, 1440, 1210, 20600, 15600, 12700, 10300, 3860, 3390, 2940, 2690, 2390, 2010, 1270, 1040, 859, 4250, 3350, 2510, 2350, 2090, 1870, 1670, 1450, 1180, 1050, 913, 795, 645, 1830, 1550, 1360, 1200, 1020, 635, 538, 410, 1360, 1110, 968, 811, 358, 280, 1060, 896, 764, 461, 389, 336, 194, 155, 123, 677, 571, 448, 179, 149, 119, 385, 308, 164, 137, 89.8, 55.7};
            Wyel = new double[] { 23600, 19800, 17700, 16700, 15900, 14300, 12900, 11200, 9820, 8410, 15600, 13700, 22200, 20000, 18200, 16400, 14600, 13300, 11800, 10900, 10200, 9500, 8880, 8270, 7200, 7980, 6640, 5890, 6230, 5390, 4470, 4020, 4920, 4370, 3990, 3480, 6590, 4930, 4110, 3620, 3220, 2870, 2520, 2390, 2140, 1870, 6890, 5400, 4480, 3710, 3140, 2790, 2480, 2290, 2070, 1800, 1820, 1550, 1340, 3240, 2660, 2080, 1960, 1770, 1610, 1460, 1300, 1570, 1410, 1260, 1120, 950, 1520, 1320, 1190, 1060, 930, 899, 778, 629, 1070, 896, 796, 687, 576, 473, 754, 646, 560, 616, 534, 471, 416, 348, 292, 504, 433, 351, 308, 266, 224, 280, 230, 207, 153, 109, 74.6 };
            Wzel = new double[] { 2130, 1740, 1540, 1430, 1350, 1220, 1080, 934, 784, 636, 2160, 1870, 2270, 2020, 1810, 1610, 1410, 1270, 1100, 1010, 946, 871, 806, 739, 621, 773, 620, 535, 610, 514, 411, 362, 518, 455, 409, 346, 1020, 743, 611, 391, 343, 301, 256, 185, 161, 136, 1290, 982, 806, 659, 361, 320, 279, 256, 228, 192, 153, 125, 104, 426, 341, 259, 243, 218, 196, 176, 153, 153, 136, 119, 104, 84.6, 201, 172, 153, 135, 115, 88.6, 75.7, 57.8, 157, 129, 113, 94.8, 56.8, 44.7, 127, 108, 92.6, 73.6, 62.6, 54.5, 37.9, 30.5, 24.2, 92, 78, 61.3, 34.9, 29.2, 23.5, 57.5, 46.2, 32.2, 27, 20.2, 14.7};
            Wypl = new double[] { 28000, 23400, 20800, 19600, 18500, 16600, 14800, 12800, 11300, 9810, 17700, 15500, 26300, 23600, 21400, 19100, 17000, 15400, 13600, 12600, 11800, 10900, 10200, 9530, 8350, 9160, 7640, 6810, 7170, 6200, 5160, 4640, 5630, 5000, 4560, 3990, 7490, 5550, 4590, 4140, 3680, 3280, 2880, 2790, 2510, 2190, 7870, 6120, 5040, 4150, 3610, 3200, 2830, 2610, 2360, 2060, 2100, 1810, 1560, 3780, 3070, 2390, 2230, 2010, 1830, 1650, 1470, 1810, 1630, 1450, 1290, 1100, 1730, 1500, 1350, 1200, 1050, 1030, 888, 724, 1210, 1010, 896, 775, 659, 543, 846, 720, 623, 711, 614, 539, 481, 403, 342, 566, 483, 393, 353, 306, 259, 314, 258, 234, 171, 123, 84.2};
            Wzpl = new double[] { 3480, 2820, 2470, 2300, 2170, 1940, 1710, 1470, 1240, 1020, 3340, 2890, 3660, 3240, 2900, 2560, 2240, 2000, 1750, 1600, 1490, 1370, 1270, 1160, 982, 1210, 974, 842, 958, 807, 647, 570, 811, 710, 638, 542, 1570, 1140, 937, 611, 535, 469, 400, 296, 258, 218, 1990, 1510, 1240, 1010, 568, 500, 436, 399, 355, 300, 243, 200, 166, 672, 535, 405, 379, 338, 304, 272, 237, 240, 213, 187, 163, 133, 313, 267, 237, 209, 178, 139, 118, 90.8, 243, 199, 174, 147, 89, 70.2, 196, 166, 142, 116, 98.4, 85.4, 60, 48.4, 38.8, 141, 119, 94.1, 54.8, 46, 37.3, 88.2, 70.9, 49.7, 41.6, 31.2, 22.6};
            X = new double[] { 18.0, 20.9, 23.1, 24.3, 25.5, 27.8, 30.7, 35.0, 39.8, 45.7, 26.7, 30.1, 16.8, 18.3, 19.8, 21.8, 24.1, 26.3, 29.7, 31.9, 33.8, 36.2, 38.6, 41.4, 46.9, 34.9, 41.6, 46.5, 33.2, 38.0, 45.2, 49.8, 31.8, 35.4, 38.6, 43.8, 21.3, 27.7, 32.7, 30.5, 34.1, 38.0, 43.1, 38.7, 42.6, 48.4, 15.9, 19.8, 23.4, 27.8, 25.0, 27.6, 30.9, 33.2, 36.4, 41.5, 35.5, 41.1, 47.0, 16.5, 19.6, 24.5, 25.8, 28.3, 30.8, 33.8, 37.9, 27.5, 30.1, 33.6, 37.5, 43.8, 24.4, 27.5, 30.5, 33.8, 38.3, 34.1, 39.0, 47.4, 24.4, 28.8, 32.1, 36.8, 35.2, 42.1, 23.6, 27.1, 31.0, 23.3, 26.5, 29.7, 31.6, 37.4, 43.1, 21.1, 24.3, 29.6, 27.5, 31.4, 36.3, 21.5, 25.6, 22.4, 22.6, 19.5, 16.3};
            U = new double[] { 0.869, 0.867, 0.869, 0.868, 0.867, 0.872, 0.870, 0.871, 0.860, 0.850, 0.885, 0.884, 0.874, 0.873, 0.873, 0.874, 0.873, 0.873, 0.867, 0.868, 0.867, 0.864, 0.865, 0.860, 0.853, 0.870, 0.862, 0.856, 0.869, 0.865, 0.859, 0.853, 0.872, 0.871, 0.870, 0.862, 0.886, 0.885, 0.886, 0.875, 0.875, 0.870, 0.863, 0.855, 0.850, 0.843, 0.891, 0.884, 0.887, 0.886, 0.873, 0.878, 0.875, 0.873, 0.873, 0.864, 0.859, 0.853, 0.847, 0.881, 0.880, 0.876, 0.881, 0.877, 0.879, 0.876, 0.872, 0.870, 0.874, 0.867, 0.869, 0.861, 0.879, 0.882, 0.880, 0.880, 0.869, 0.870, 0.871, 0.858, 0.886, 0.882, 0.880, 0.874, 0.871, 0.863, 0.888, 0.890, 0.889, 0.873, 0.872, 0.871, 0.867, 0.859, 0.849, 0.890, 0.889, 0.879, 0.874, 0.868, 0.856, 0.881, 0.877, 0.888, 0.886, 0.889, 0.894};
            Iw = new double[] { 81.2, 64.0, 56.0, 51.1, 48.4, 43.3, 37.7, 32.2, 26.8, 21.5, 88.9, 75.8, 77.9, 67.7, 59.8, 52.1, 44.8, 39.6, 34.2, 31.2, 28.8, 26.4, 24.2, 22.1, 18.4, 19.3, 15.2, 13.0, 11.3, 9.39, 7.40, 6.46, 7.42, 6.42, 5.72, 4.80, 14.5, 10.2, 8.17, 3.99, 3.45, 2.99, 2.52, 1.44, 1.24, 1.04, 15.0, 11.0, 8.77, 7.01, 2.67, 2.32, 1.99, 1.81, 1.60, 1.33, 0.857, 0.691, 0.566, 2.25, 1.73, 1.27, 1.18, 1.04, 0.922, 0.818, 0.705, 0.591, 0.518, 0.448, 0.387, 0.311, 0.728, 0.608, 0.533, 0.466, 0.392, 0.246, 0.207, 0.155, 0.412, 0.330, 0.286, 0.237, 0.105, 0.0810, 0.234, 0.195, 0.164, 0.102, 0.0846, 0.0725, 0.0442, 0.0349, 0.0270, 0.103, 0.0857, 0.0660, 0.0280, 0.0230, 0.0182, 0.0374, 0.0294, 0.0154, 0.00990, 0.00470, 0.00200};
            It = new double[] { 7150, 4400, 3190, 2700, 2330, 1720, 1260, 835, 582, 390, 1730, 1190, 7130, 5340, 4100, 3030, 2200, 1650, 1160, 926, 769, 626, 514, 422, 291, 514, 306, 221, 404, 267, 159, 119, 308, 220, 169, 116, 785, 340, 200, 216, 154, 111, 77.0, 95.0, 71.0, 48.8, 1290, 642, 373, 216, 250, 178, 126, 101, 75.7, 51.5, 73.8, 47.9, 32.0, 515, 292, 146, 121, 90.7, 69.2, 51.8, 37.1, 89.2, 65.9, 47.7, 33.8, 21.4, 93.0, 62.8, 46.1, 33.3, 23.1, 29.0, 19.0, 10.7, 55.7, 33.4, 23.8, 15.8, 15.1, 8.79, 34.8, 22.2, 14.7, 31.8, 21.1, 14.8, 12.2, 7.40, 4.77, 23.9, 15.3, 8.55, 9.57, 6.42, 4.15, 10.3, 5.96, 7.02, 4.41, 3.56, 2.85};
            A = new double[] { 744, 629, 556, 529, 500, 445, 400, 347, 317, 283, 494, 437, 733, 664, 604, 542, 486, 440, 398, 368, 346, 323, 304, 286, 256, 289, 247, 224, 251, 220, 187, 171, 217, 194, 178, 159, 303, 228, 190, 178, 159, 144, 129, 128, 117, 104, 348, 279, 231, 192, 176, 155, 139, 129, 117, 105, 108, 95.2, 83.7, 206, 170, 135, 125, 114, 104, 94.6, 85.5, 105, 94.5, 85.6, 76.2, 66.6, 109, 94.5, 85.5, 76.5, 69.0, 67.9, 58.6, 49.7, 85.5, 72.6, 64.9, 57.3, 49.8, 42.1, 68.8, 58.7, 51.3, 61.2, 53.4, 47.2, 41.8, 35.9, 31.6, 54.8, 47.2, 39.7, 36.1, 32.0, 28.0, 38.2, 32.0, 29.4, 24.3, 20.3, 16.5};
        }
    }
}
